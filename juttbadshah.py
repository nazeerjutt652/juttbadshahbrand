# Folow github : https://github.com/clayhacker-max
#Compile By Mr.Gaming
#My Team : Black Coder Crush
import base64
import marshal
exec marshal.loads(base64.b64decode(""))
